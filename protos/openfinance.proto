syntax = "proto3";

package openfinance;

// OpenFinance gRPC Service
service OpenFinanceService {
  // List all available contracts
  rpc ListContracts(ListContractsRequest) returns (ListContractsResponse);

  // Get details of a specific contract
  rpc GetContractDetails(GetContractDetailsRequest) returns (ContractDetailsResponse);

  // Generate mock data for a schema
  rpc GenerateMockData(GenerateMockDataRequest) returns (GenerateMockDataResponse);

  // Get correlated data across contracts
  rpc GetCorrelatedData(GetCorrelatedDataRequest) returns (CorrelatedDataResponse);

  // Get correlation graph
  rpc GetCorrelationGraph(GetCorrelationGraphRequest) returns (CorrelationGraphResponse);

  // Query data by endpoint
  rpc QueryEndpoint(QueryEndpointRequest) returns (QueryEndpointResponse);
}

// Request/Response messages

message ListContractsRequest {
  optional string category = 1;
}

message ListContractsResponse {
  repeated ContractSummary contracts = 1;
}

message ContractSummary {
  string name = 1;
  string version = 2;
  string category = 3;
  string description = 4;
  int32 endpoint_count = 5;
  int32 schema_count = 6;
}

message GetContractDetailsRequest {
  string contract_name = 1;
}

message ContractDetailsResponse {
  string name = 1;
  string version = 2;
  string description = 3;
  string category = 4;
  string base_path = 5;
  repeated Endpoint endpoints = 6;
  map<string, Schema> schemas = 7;
}

message Endpoint {
  string path = 1;
  string method = 2;
  string operation_id = 3;
  string summary = 4;
  string description = 5;
  string request_schema = 6;
  string response_schema = 7;
  repeated Parameter parameters = 8;
}

message Parameter {
  string name = 1;
  string in = 2;  // query, path, header
  string type = 3;
  bool required = 4;
  string description = 5;
}

message Schema {
  string name = 1;
  string type = 2;
  string description = 3;
  repeated string properties = 4;
  map<string, FieldValidation> validations = 5;
}

message FieldValidation {
  optional string pattern = 1;
  optional int32 min_length = 2;
  optional int32 max_length = 3;
  optional double minimum = 4;
  optional double maximum = 5;
  repeated string enum = 6;
  optional string format = 7;
}

message GenerateMockDataRequest {
  string contract_name = 1;
  string schema_name = 2;
  int32 count = 3;
}

message GenerateMockDataResponse {
  repeated MockData data = 1;
}

message MockData {
  string schema_name = 1;
  string contract_name = 2;
  string data_json = 3;  // JSON string of the mocked data
  string created_at = 4;
  map<string, string> correlation_ids = 5;
}

message GetCorrelatedDataRequest {
  string primary_contract = 1;
  string primary_id_field = 2;
  string primary_id_value = 3;
}

message CorrelatedDataResponse {
  MockData primary_data = 1;
  map<string, RelatedDataList> related_data = 2;
}

message RelatedDataList {
  repeated MockData data = 1;
}

message GetCorrelationGraphRequest {}

message CorrelationGraphResponse {
  map<string, ContractList> graph = 1;
  repeated CorrelationRule rules = 2;
}

message ContractList {
  repeated string contracts = 1;
}

message CorrelationRule {
  string source_contract = 1;
  string target_contract = 2;
  string source_field = 3;
  string target_field = 4;
  string relationship = 5;
}

message QueryEndpointRequest {
  string contract_name = 1;
  string endpoint_path = 2;
  string method = 3;
  map<string, string> parameters = 4;
  string body_json = 5;
}

message QueryEndpointResponse {
  int32 status_code = 1;
  string response_json = 2;
  map<string, string> headers = 3;
}
